from os import getenv
from flask import jsonify
from flask import escape

import pymysql
from pymysql.err import OperationalError

# TODO(developer): specify SQL connection details
CONNECTION_NAME = getenv(
  'INSTANCE_CONNECTION_NAME',
  'psychic-binder-236519:us-central1:cloudsqltrestapi')
DB_USER = getenv('MYSQL_USER', 'hemant')
DB_PASSWORD = getenv('MYSQL_PASSWORD', 'rout')
DB_NAME = getenv('MYSQL_DATABASE', 'testDB')

mysql_config = {
  'user': DB_USER,
  'password': DB_PASSWORD,
  'db': DB_NAME,
  'charset': 'utf8mb4',
  'cursorclass': pymysql.cursors.DictCursor,
  'autocommit': True
}

# Create SQL connection globally to enable reuse
# PyMySQL does not include support for connection pooling
mysql_conn = None


def __get_cursor():
    """
    Helper function to get a cursor
      PyMySQL does NOT automatically reconnect,
      so we must reconnect explicitly using ping()
    """
    try:
        return mysql_conn.cursor()
    except OperationalError:
        mysql_conn.ping(reconnect=True)
        return mysql_conn.cursor()


def getMovieRating(request):
    global mysql_conn
	#request_json = request.get_json(silent=True)
    #request_json = request.get_json(silent=True)
    #request_args = request.args
    # Initialize connections lazily, in case SQL access isn't needed for this
    # GCF instance. Doing so minimizes the number of active SQL connections,
    # which helps keep your GCF instances under SQL connection limits.
    
    #mid = request_json['movieid']
    #m = '1405'
    if not mysql_conn:
        try:
            mysql_conn = pymysql.connect(**mysql_config)
            print ("connect successful!!")
        except OperationalError:
            # If production settings fail, use local development ones
            mysql_config['unix_socket'] = f'/cloudsql/{CONNECTION_NAME}'
            mysql_conn = pymysql.connect(**mysql_config)

    # Remember to close SQL resources declared while running this function.
    # Keep any declared in global scope (e.g. mysql_conn) for later reuse.
    #request_json = request.get_json(silent=True)
    with __get_cursor() as cursor:
        #mid=request.get_json("movieid")
        #print(' movieid '+mid)
        #cursor.execute("""SELECT * from movie where movieid = '%s'""",(mid,))
        #cursor.execute('SELECT * from movie')
        #cursor.execute("SELECT * from movie where movieid = '1405'")
        #query = """SELECT * from movie where movieid = %s"""
        #cursor.execute(query,(mid,))
        request_json = request.get_json(silent=True)
        m = request_json['movieid'] 
        sql_select_query = 'select * from movie where movieid = %s'
        cursor.execute(sql_select_query, (m, ))
        results = cursor.fetchall()
        #return str(results['now'])
        #return jsonify(results['movieid'],results['userid'],results['rating'])
        return jsonify(results)
    	#return 'Hello {}!'.format(escape(mid))
    
    
    
	PyMySQL==0.9.3
flask==1.0.2

    
    
    https://pynative.com/python-mysql-select-query-to-fetch-data/