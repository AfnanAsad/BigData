import java.text.DateFormat
  import java.text.ParseException
  import java.text.SimpleDateFormat
  import java.time.DateTimeException
  import java.time.LocalDate
  import java.time.LocalDateTime
  import java.time.ZoneId
  import java.time.temporal.ChronoUnit
  import java.util.Calendar
  import java.util.Date

  object DateFunctions {
    /**
      * Returns number of days since 1st January 1900
      *
      * @return number of days since 1st January 1900
      */
    def today[T]: Integer = {
      var date = 0
      try
        val formatter = new SimpleDateFormat("dd MM yyyy")
        val d1 = formatter.parse("1 01 1900")
        val d2 = new Date
        val DateFraction = 1000 * 60 * 60 * 24
        date = ((d2.getTime - d1.getTime) / DateFraction).toInt

      catch {
        case e: Exception => {
          // since we are parsing static date value, parse function will never
          // throw exception
        }
      }
      date
    }

    /**
      * Returns current date and time in yyyyMMddHmmssS format
      *
      * @return current date and time in yyyyMMddHmmssS format
      */
    @SuppressWarnings(Array("unchecked")) def now[T]: T = now("yyyyMMddHmmssS").asInstanceOf[T]

    /**
      * Returns current date and time in the required format
      *
      * @param dateFormat the format for the date
      * @return current date and time in the required format
      */
    def now(dateFormat: String): String = {
      val sdf = new SimpleDateFormat(dateFormat)
      val date = new Date
      sdf.format(date)
    }



    /**
      * Returns a date object from a string date value
      *
      * @param inputDateInStringFormat
      * the date value in string
      * @param dateFormat
      * the date format of the date value passed in
      * { @code inputDateInStringFormat}
      * @return a date object of the corresponding date value
      *         <p>
      *         the method returns null if any parameter is null
      * @deprecated This method is deprecated, Use
      *             { @link DateFunctions#getDateFromString(String inputDateInStringFormat, String dateFormat)}
      *                     instead
      * @throws ParseException
      * if the date value passed in { @code inputDateInStringFormat}
      *                                     does not match the { @code dateFormat}
      */
    @deprecated
    @throws[ParseException]
    def getDateFromString[T](inputDateInStringFormat: T, dateFormat: String): Date = {
      if (inputDateInStringFormat == null || dateFormat == null) return null
      val sdf = new SimpleDateFormat(dateFormat)
      sdf.setLenient(false)
      val date = sdf.parse(inputDateInStringFormat.asInstanceOf[String])
      date
    }


    /**
      * Returns a date object from a string date value
      *
      * @param inputDateInStringFormat
      * the date value in string
      * @param dateFormat
      * the date format of the date value passed in
      * { @code inputDateInStringFormat}
      * @return a date object of the corresponding date value
      *         <p>
      *         the method returns null if any parameter is null
      * @throws ParseException
      * if the date value passed in { @code inputDateInStringFormat}
      *                                     does not match the { @code dateFormat}
      */
    @throws[ParseException]
    def getDateFromString(inputDateInStringFormat: String, dateFormat: String): Date = {
      if (inputDateInStringFormat == null || dateFormat == null) return null
      val sdf = new SimpleDateFormat(dateFormat)
      sdf.setLenient(false)
      val date = sdf.parse(inputDateInStringFormat)
      date
    }

    /**
      * Returns a string value of the date
      *
      * @param inputDate
      * the date to fetch the string value
      * @param dateFormat
      * the date format of the date value passed in { @code inputDate}
      * @return a string value of the date
      *         <p>
      *         the method returns null if any parameter is null
      * @throws ParseException
      * if the date value passed in { @code inputDate} does not match
      *                                     the { @code dateFormat}
      */
    @throws[ParseException]
    def getStringDateFromDateObject[T](inputDate: T, dateFormat: String): String = {
      if (inputDate == null || dateFormat == null) return null
      val sdf = new SimpleDateFormat(dateFormat)
      sdf.setLenient(false)
      val stringDate = sdf.format(inputDate)
      stringDate
    }

    /**
      * Returns a string value of the date
      *
      * @param inputDate
      * the date to fetch the string value
      * @param dateFormat
      * the date format of the date value passed in { @code inputDate}
      * @return a string value of the date
      *         <p>
      *         the method returns null if any parameter is null
      * @throws ParseException
      * if the date value passed in { @code inputDate} does not match
      *                                     the { @code dateFormat}
      */
    @throws[ParseException]
    def getStringDateFromDateObject(inputDate: Date, dateFormat: String): String = {
      if (inputDate == null || dateFormat == null) return null
      val sdf = new SimpleDateFormat(dateFormat)
      sdf.setLenient(false)
      val stringDate = sdf.format(inputDate)
      stringDate
    }

    /**
      * Validates the string date value to the format specified
      *
      * @param inputDate
      * the date value in string to be validated
      * @param dateFormat
      * the date format to validate the string value against
      * @return <b>{ @code true}</b> if the date value passed in { @code inputDate}
      *                    matches the date format passed in { @code dateFormat}
      *                    <p>
      *                    <b>{ @code false}</b> if the date value passed in
      *                    { @code inputDate} does not match the date format passed in
      *                    { @code dateFormat}
      */
    def validateStringDate(inputDate: String, dateFormat: String): Boolean = {
      if (dateFormat != null && !dateFormat == "" && inputDate != null && !inputDate == "") {
        val sdf = new SimpleDateFormat(dateFormat)
        sdf.setLenient(false)
        try
          sdf.parse(inputDate)
          return true

        catch {
          case e: ParseException => {
            return false
          }
        }
      }
      false
    }

    /**
      * Returns an integer value which holds the day value retrieved from {@code date} parameter
      *
      * @param date the date from which the day value is to be retrieved
      * @return the day value from { @code date} parameter
      */
    def getDay(date: Date): Integer = {
      val day = new SimpleDateFormat("dd").format(date)
      day.toInt
    }

    /**
      * Returns an integer value which holds the month value retrieved from {@code date} parameter
      *
      * @param date the date from which the month value is to be retrieved
      * @return the month value from { @code date} parameter
      */
    def getMonth(date: Date): Integer = {
      val month = new SimpleDateFormat("MM").format(date)
      month.toInt
    }

    /**
      * Returns an integer value which holds the year value retrieved from {@code date} parameter
      *
      * @param date the date from which the year value is to be retrieved
      * @return the year value from { @code date} parameter
      */
    def getYear(date: Date): Integer = {
      val year = new SimpleDateFormat("yyyy").format(date)
      year.toInt
    }

    /**
      * Returns Date object which holds last date value of the month retrieved from {@code date} parameter
      *
      * @param date the date from which the last date of the month is to be retrieved
      * @return the last date value of the month retrieved from { @code date} parameter
      */
    def getLastDateOfMonth(date: Date): Date = {
      val calendar = Calendar.getInstance
      calendar.setTime(date)
      calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum(Calendar.DAY_OF_MONTH))
      calendar.getTime
    }

    /**
      * Returns an integer value which holds the last day value of the month retrieved from {@code date}
      *
      * @param date the date from which the last day value of the month is to be retrieved
      * @return the last day value of the month retrieved from { @code date} parameter
      */
    def getLastDayOfMonth(date: Date): Integer = {
      val c = Calendar.getInstance
      c.setTime(date)
      c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH))
      val lastDayOfMonth = new SimpleDateFormat("dd").format(c.getTime)
      lastDayOfMonth.toInt
    }

    /**
      * Returns date which hold last date retrieved for {@code month} for the current year
      *
      * @param month the month from which the last date value is to be retrieved
      * @return the last date value from { @code month} parameter for the current year
      */
    def getLastDateOfMonth(month: Int): Date = {
      val calendar = Calendar.getInstance
      calendar.set(calendar.get(Calendar.YEAR), month - 1, 1)
      calendar.set(Calendar.DATE, calendar.getActualMaximum(Calendar.DATE))
      calendar.getTime
    }

    /**
      * Returns date which holds last date for that {@code month} and {@code year}
      *
      * @param month the month from which the last date value is to be retrieved
      * @param year  the year from which the last date value is to be retrieved
      * @return last date value for { @code month} of { @code year}
      */
    def getLastDateOfMonthAndYear(month: Int, year: Int): Date = {
      val calendar = Calendar.getInstance
      calendar.set(year, month - 1, 1)
      calendar.set(Calendar.DATE, calendar.getActualMaximum(Calendar.DATE))
      calendar.getTime
    }

    /**
      * Returns an integer which holds day of week retrieved from {@code date}
      *
      * @param date the date for which the day of week is to be retrieved
      * @return day of week for { @code date}
      */
    def getDayOfWeek(date: Date): Integer = {
      val c = Calendar.getInstance
      c.setTime(date)
      val dayOfWeek = c.get(Calendar.DAY_OF_WEEK)
      dayOfWeek
    }

    /**
      * Returns an integer which hold day of year retrieved from {@code date}
      *
      * @param date the date from which the day of year is to be retrieved
      * @return day of year for { @code date}
      */
    def getDayOfYear(date: Date): Integer = {
      val c = Calendar.getInstance
      c.setTime(date)
      val dayOfYear = c.get(Calendar.DAY_OF_YEAR)
      dayOfYear
    }

    /**
      * Returns an integer which holds difference between {@code fromDate} to {@code toDate} in days
      *
      * @param fromDate the date from which the difference is to be calculated
      * @param toDate   the date to which the difference is to be calculated
      * @return the difference of days between { @code fromDate} to { @code toDate}
      */
    def getDayDifference(fromDate: Date, toDate: Date): Integer = {
      val firstDate = LocalDateTime.ofInstant(fromDate.toInstant, ZoneId.systemDefault)
      val secondDate = LocalDateTime.ofInstant(toDate.toInstant, ZoneId.systemDefault)
      val daysLong = Math.abs(ChronoUnit.DAYS.between(firstDate, secondDate))
      daysLong.toInt
    }

    /**
      * Returns an integer which holds the difference of months between {@code fromDate} and {@code toDate}
      *
      * @param fromDate the date from which the difference is to be calculated
      * @param toDate   the date to which the difference is to be calculated
      * @return the difference of months between { @code fromDate} and { @code toDate}
      */
    def getMonthDifference(fromDate: Date, toDate: Date): Integer = {
      val firstDate = LocalDateTime.ofInstant(fromDate.toInstant, ZoneId.systemDefault)
      val secondDate = LocalDateTime.ofInstant(toDate.toInstant, ZoneId.systemDefault)
      val months = Math.abs(ChronoUnit.MONTHS.between(firstDate, secondDate))
      months.toInt
    }

    /**
      * Returns an integer which hold difference of years between two dates
      *
      * @param fromDate the date from which the difference is to be calculated
      * @param toDate   the date to which the difference is to be calculated
      * @return difference of years between { @code fromDate} and { @code toDate}
      */
    def getYearDifference(fromDate: Date, toDate: Date): Integer = {
      val firstDate = LocalDateTime.ofInstant(fromDate.toInstant, ZoneId.systemDefault)
      val secondDate = LocalDateTime.ofInstant(toDate.toInstant, ZoneId.systemDefault)
      val years = Math.abs(ChronoUnit.YEARS.between(firstDate, secondDate))
      years.toLong.toInt
    }

    /**
      * Returns date with {@code days} added to {@code date}
      *
      * @param date the date to which days are to be added
      * @param days days to be added to given { @code date}
      * @return date after adding { @code days} to { @code date}
      *                                   if { @code date} is null then return null
      */
    def addDaysToDate(date: Date, days: Int): Date = {
      if (date == null) return null
      val ldt = LocalDateTime.ofInstant(date.toInstant, ZoneId.systemDefault)
      val newDate = Date.from(ldt.plusDays(days.toLong).atZone(ZoneId.systemDefault).toInstant)
      newDate
    }

    /**
      * Returns date with {@code hours} added to {@code date}
      *
      * @param date  the date to which hours are to be added
      * @param hours hours to be added to given { @code date}
      * @return date after adding { @code hours} to { @code date}
      *                                   if { @code date} is null then return null
      */
    def addHoursToDate(date: Date, hours: Int): Date = {
      if (date == null) return null
      val c = Calendar.getInstance
      c.setTime(date)
      c.add(Calendar.HOUR_OF_DAY, hours)
      c.getTime
    }

    /**
      * Returns date with {@code mins} added to {@code date}
      *
      * @param date the date to which minutes are to be added
      * @param mins minutes to be added to given { @code date}
      * @return date after adding { @code mins} to { @code date}
      *                                   if { @code date} is null then return null
      */
    def addMinutesToDate(date: Date, mins: Int): Date = {
      if (date == null) return null
      val c = Calendar.getInstance
      c.setTime(date)
      c.add(Calendar.MINUTE, mins)
      c.getTime
    }

    /**
      * Returns date with {@code secs} added to {@code date}
      *
      * @param date the date to which seconds are to be added
      * @param secs seconds to be added to given { @code date}
      * @return date after adding { @code secs} to { @code date}
      *                                   if { @code date} is null then return null
      */
    def addSecondsToDate(date: Date, secs: Int): Date = {
      if (date == null) return null
      val c = Calendar.getInstance
      c.setTime(date)
      c.add(Calendar.SECOND, secs)
      c.getTime
    }

    /**
      * Returns date with {@code milliSecs} added to {@code date}
      *
      * @param date      the date to which milli seconds are to be added
      * @param milliSecs milli seconds to be added to given { @code date}
      * @return date after adding { @code milliSecs} seconds to { @code date}
      *                                   if { @code date} is null then return null
      */
    def addMilliSecondsToDate(date: Date, milliSecs: Long): Date = {
      if (date == null) return null
      val c = Calendar.getInstance
      c.setTime(date)
      c.setTimeInMillis(c.getTimeInMillis + milliSecs)
      c.getTime
    }

    /**
      * Returns date with {@code days} and {@code hours} added to {@code date}
      *
      * @param date the date to which days are to be added
      * @param days days to be added to given { @code date}
      * @param hours hours to be added to given { @code date}
      * @return date after adding { @code days} and { @code hours} to { @code date}
      *                                   if { @code date} is null then return null
      */
    def addToDate(date: Date, days: Int, hours: Int): Date = {
      if (date == null) return null
      date = addHoursToDate(date, hours)
      date = addDaysToDate(date, days)
      date
    }

    /**
      * Returns date with {@code days}, {@code hours} and {@code mins} added to {@code date}
      *
      * @param date the date to which days are to be added
      * @param days days to be added to given { @code date}
      * @param hours hours to be added to given { @code date}
      * @param mins minutes to be added to given { @code date}
      * @return date after adding { @code days}, { @code hours} and { @code mins} to { @code date}
      *                                   if { @code date} is null then return null
      */
    def addToDate(date: Date, days: Int, hours: Int, mins: Int): Date = {
      if (date == null) return null
      date = addMinutesToDate(date, mins)
      date = addToDate(date, days, hours)
      date
    }

    /**
      * Returns date with {@code days}, {@code hours}, {@code mins} and {@code secs} added to {@code date}
      *
      * @param date the date to which days are to be added
      * @param days days to be added to given { @code date}
      * @param hours hours to be added to given { @code date}
      * @param mins minutes to be added to given { @code date}
      * @param secs seconds to be added to given { @code date}
      * @return date after adding { @code days}, { @code hours}, { @code mins} and { @code secs} to { @code date}
      *                                   if { @code date} is null then return null
      */
    def addToDate(date: Date, days: Int, hours: Int, mins: Int, secs: Int): Date = {
      if (date == null) return null
      date = addSecondsToDate(date, secs)
      date = addToDate(date, days, hours, mins)
      date
    }

    /**
      * Returns date with {@code days}, {@code hours}, {@code mins}, {@code secs} and {@code milliSecs} added to {@code date}
      *
      * @param date the date to which days are to be added
      * @param days days to be added to given { @code date}
      * @param hours hours to be added to given { @code date}
      * @param mins minutes to be added to given { @code date}
      * @param secs seconds to be added to given { @code date}
      * @param milliSecs milli seconds to be added to given { @code date}
      * @return date after adding { @code days}, { @code hours}, { @code mins}, { @code secs} and { @code milliSecs} to { @code date}
      *                                   if { @code date} is null then return null
      */
    def addToDate(date: Date, days: Int, hours: Int, mins: Int, secs: Int, milliSecs: Int): Date = {
      if (date == null) return null
      date = addMilliSecondsToDate(date, milliSecs)
      date = addToDate(date, days, hours, mins, secs)
      date
    }

    /**
      * Returns date with {@code weeks} added to {@code date}
      *
      * @param date  the date to which weeks are to be added
      * @param weeks weeks to be added to given { @code date}
      * @return date after adding { @code weeks} to { @code date}
      */
    def addWeeksToDate(date: Date, weeks: Int): Date = {
      val localDateTime = LocalDateTime.ofInstant(date.toInstant, ZoneId.systemDefault)
      val newDate = Date.from(localDateTime.plusWeeks(weeks.toLong).atZone(ZoneId.systemDefault).toInstant)
      newDate
    }

    /**
      * Returns date with {@code months} added to {@code date}
      *
      * @param date   the date to which months are to be added
      * @param months months to be added to given { @code date}
      * @return date after adding { @code months} to { @code date}
      */
    def addMonthsToDate(date: Date, months: Int): Date = {
      val localDateTime = LocalDateTime.ofInstant(date.toInstant, ZoneId.systemDefault)
      val newDate = Date.from(localDateTime.plusMonths(months.toLong).atZone(ZoneId.systemDefault).toInstant)
      newDate
    }

    /**
      * Returns date with {@code years} added to {@code date}
      *
      * @param date  the date to which months are to be added
      * @param years years to be added to given { @code date}
      * @return date after adding  years to it
      */
    def addYearsToDate(date: Date, years: Int): Date = {
      val localDateTime = LocalDateTime.ofInstant(date.toInstant, ZoneId.systemDefault)
      val newDate = Date.from(localDateTime.plusYears(years.toLong).atZone(ZoneId.systemDefault).toInstant)
      newDate
    }

    /**
      * Returns the number of days from {@code date} to today's date
      *
      * @param fromDate the date from which the days are to be counted
      * @return number of days between { @code date} and today's date
      */
    def getDaysCountFromDate(fromDate: Date): Integer = getDayDifference(fromDate, Calendar.getInstance.getTime)

    /**
      * Returns number of days from 1900/01/01 to today's date
      *
      * @return number of days from 1900/01/01 to today's date
      */
    def getDaysCountTillDate: Integer = {
      var fromDate = null
      val localDate = LocalDate.parse("1900-01-01")
      fromDate = Date.from(localDate.atStartOfDay(ZoneId.systemDefault).toInstant)
      getDayDifference(fromDate, Calendar.getInstance.getTime)
    }

    /**
      * Returns an integer which holds number of days from unix epoch i.e. 1970/01/01 to today's date
      *
      * @return number of days from 1970/01/01 to today's date
      */
    def getDaysCountFromEpoch: Integer = {
      var fromDate = null
      val localDate = LocalDate.parse("1970-01-01")
      fromDate = Date.from(localDate.atStartOfDay(ZoneId.systemDefault).toInstant)
      getDayDifference(fromDate, Calendar.getInstance.getTime)
    }

    /**
      * Returns the earlier date between {@code date1} and {@code date2}
      *
      * @param date1 input date value
      * @param date2 input date value
      * @return returns a value indicating the earlier of { @code date1} and { @code date2}
      *                                                           if either { @code date1} or { @code date2} are null returns null
      */
    def dateCompare(date1: Date, date2: Date): Date = {
      if ((date1 == null) || (date2 == null)) return null
      val localDateTime1 = LocalDateTime.ofInstant(date1.toInstant, ZoneId.systemDefault)
      val localDateTime2 = LocalDateTime.ofInstant(date2.toInstant, ZoneId.systemDefault)
      if (localDateTime1.isBefore(localDateTime2)) date1
      else date2
    }

    /**
      * Returns the date for {@code timeInMillisecs}
      *
      * @param timeInMillisecs input date in milliseconds
      * @return returns date value for time in milliseconds
      *         returns null if { @code timeInMillisecs} is null
      */
    def toDate(timeInMillisecs: Long): Date = {
      if (timeInMillisecs == null) return null
      new Date(timeInMillisecs)
    }

    /**
      * Returns the date for {@code year},{@code month} and {@code day}
      *
      * @param year  input year of date
      * @param month input month of date
      * @param day   input day of date
      * @retrun returns date for give { @code year},(@code month} and { @day }
      *                                                                      return null if either of { @code year}, { @code month} or { @code day} are null
      * @throws DateTimeException if the value of any field is out of range,
      *                           or if the day-of-month is invalid for the month-year
      */
    @throws[DateTimeException]
    def toDate(year: Integer, month: Integer, day: Integer): Date = {
      if (year == null || month == null || day == null) return null
      val localDate = LocalDate.of(year, month, day)
      java.sql.Date.valueOf(localDate)
    }
  }


 val str="^(1[0-2]|0[1-9])/(3[01]|[12][0-9]|0[1-9])/[0-9]{4}$"
    val dt="10/12/2016"
    //println(str.findFirstIn(dt))
    val sd=new SimpleDateFormat("dd/MM/yyyy")
    println(Try(sd.parse(dt)).isSuccess)
    println(dt.matches(str))
